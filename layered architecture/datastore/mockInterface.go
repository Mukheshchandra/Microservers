// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package datastore is a generated GoMock package.
package datastore

import (
	entities "GoLang-Interns-2022/entities"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthor is a mock of Author interface.
type MockAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorMockRecorder
}

// MockAuthorMockRecorder is the mock recorder for MockAuthor.
type MockAuthorMockRecorder struct {
	mock *MockAuthor
}

// NewMockAuthor creates a new mock instance.
func NewMockAuthor(ctrl *gomock.Controller) *MockAuthor {
	mock := &MockAuthor{ctrl: ctrl}
	mock.recorder = &MockAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthor) EXPECT() *MockAuthorMockRecorder {
	return m.recorder
}

// Deleteauthor mocks base method.
func (m *MockAuthor) Deleteauthor(ctx context.Context, id int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleteauthor", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deleteauthor indicates an expected call of Deleteauthor.
func (mr *MockAuthorMockRecorder) Deleteauthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleteauthor", reflect.TypeOf((*MockAuthor)(nil).Deleteauthor), ctx, id)
}

// IncludeAuthor mocks base method.
func (m *MockAuthor) IncludeAuthor(ctx context.Context, id int) (entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncludeAuthor", ctx, id)
	ret0, _ := ret[0].(entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncludeAuthor indicates an expected call of IncludeAuthor.
func (mr *MockAuthorMockRecorder) IncludeAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncludeAuthor", reflect.TypeOf((*MockAuthor)(nil).IncludeAuthor), ctx, id)
}

// Postauthor mocks base method.
func (m *MockAuthor) Postauthor(ctx context.Context, author entities.Author) (entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Postauthor", ctx, author)
	ret0, _ := ret[0].(entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Postauthor indicates an expected call of Postauthor.
func (mr *MockAuthorMockRecorder) Postauthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Postauthor", reflect.TypeOf((*MockAuthor)(nil).Postauthor), ctx, author)
}

// Putauthor mocks base method.
func (m *MockAuthor) Putauthor(ctx context.Context, id int, author entities.Author) (entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Putauthor", ctx, id, author)
	ret0, _ := ret[0].(entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Putauthor indicates an expected call of Putauthor.
func (mr *MockAuthorMockRecorder) Putauthor(ctx, id, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Putauthor", reflect.TypeOf((*MockAuthor)(nil).Putauthor), ctx, id, author)
}

// MockBook is a mock of Book interface.
type MockBook struct {
	ctrl     *gomock.Controller
	recorder *MockBookMockRecorder
}

// MockBookMockRecorder is the mock recorder for MockBook.
type MockBookMockRecorder struct {
	mock *MockBook
}

// NewMockBook creates a new mock instance.
func NewMockBook(ctrl *gomock.Controller) *MockBook {
	mock := &MockBook{ctrl: ctrl}
	mock.recorder = &MockBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBook) EXPECT() *MockBookMockRecorder {
	return m.recorder
}

// Deletebook mocks base method.
func (m *MockBook) Deletebook(ctx context.Context, id int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deletebook", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deletebook indicates an expected call of Deletebook.
func (mr *MockBookMockRecorder) Deletebook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deletebook", reflect.TypeOf((*MockBook)(nil).Deletebook), ctx, id)
}

// GetAllBook mocks base method.
func (m *MockBook) GetAllBook(ctx context.Context) ([]entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBook", ctx)
	ret0, _ := ret[0].([]entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBook indicates an expected call of GetAllBook.
func (mr *MockBookMockRecorder) GetAllBook(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBook", reflect.TypeOf((*MockBook)(nil).GetAllBook), ctx)
}

// GetBookbyTitle mocks base method.
func (m *MockBook) GetBookbyTitle(ctx context.Context, title string) ([]entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookbyTitle", ctx, title)
	ret0, _ := ret[0].([]entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookbyTitle indicates an expected call of GetBookbyTitle.
func (mr *MockBookMockRecorder) GetBookbyTitle(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookbyTitle", reflect.TypeOf((*MockBook)(nil).GetBookbyTitle), ctx, title)
}

// GetbyID mocks base method.
func (m *MockBook) GetbyID(ctx context.Context, id int) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetbyID", ctx, id)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetbyID indicates an expected call of GetbyID.
func (mr *MockBookMockRecorder) GetbyID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetbyID", reflect.TypeOf((*MockBook)(nil).GetbyID), ctx, id)
}

// Postbook mocks base method.
func (m *MockBook) Postbook(ctx context.Context, book *entities.Book) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Postbook", ctx, book)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Postbook indicates an expected call of Postbook.
func (mr *MockBookMockRecorder) Postbook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Postbook", reflect.TypeOf((*MockBook)(nil).Postbook), ctx, book)
}

// Putbook mocks base method.
func (m *MockBook) Putbook(ctx context.Context, id int, book *entities.Book) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Putbook", ctx, id, book)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Putbook indicates an expected call of Putbook.
func (mr *MockBookMockRecorder) Putbook(ctx, id, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Putbook", reflect.TypeOf((*MockBook)(nil).Putbook), ctx, id, book)
}
