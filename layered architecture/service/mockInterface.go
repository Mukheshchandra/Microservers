// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	entities "GoLang-Interns-2022/entities"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorService is a mock of AuthorService interface.
type MockAuthorService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorServiceMockRecorder
}

// MockAuthorServiceMockRecorder is the mock recorder for MockAuthorService.
type MockAuthorServiceMockRecorder struct {
	mock *MockAuthorService
}

// NewMockAuthorService creates a new mock instance.
func NewMockAuthorService(ctrl *gomock.Controller) *MockAuthorService {
	mock := &MockAuthorService{ctrl: ctrl}
	mock.recorder = &MockAuthorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorService) EXPECT() *MockAuthorServiceMockRecorder {
	return m.recorder
}

// Deleteauthor mocks base method.
func (m *MockAuthorService) Deleteauthor(ctx context.Context, id int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleteauthor", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deleteauthor indicates an expected call of Deleteauthor.
func (mr *MockAuthorServiceMockRecorder) Deleteauthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleteauthor", reflect.TypeOf((*MockAuthorService)(nil).Deleteauthor), ctx, id)
}

// Postauthor mocks base method.
func (m *MockAuthorService) Postauthor(ctx context.Context, author entities.Author) (entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Postauthor", ctx, author)
	ret0, _ := ret[0].(entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Postauthor indicates an expected call of Postauthor.
func (mr *MockAuthorServiceMockRecorder) Postauthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Postauthor", reflect.TypeOf((*MockAuthorService)(nil).Postauthor), ctx, author)
}

// Putauthor mocks base method.
func (m *MockAuthorService) Putauthor(ctx context.Context, id int, author entities.Author) (entities.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Putauthor", ctx, id, author)
	ret0, _ := ret[0].(entities.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Putauthor indicates an expected call of Putauthor.
func (mr *MockAuthorServiceMockRecorder) Putauthor(ctx, id, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Putauthor", reflect.TypeOf((*MockAuthorService)(nil).Putauthor), ctx, id, author)
}

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// Deletebook mocks base method.
func (m *MockBookService) Deletebook(ctx context.Context, id int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deletebook", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deletebook indicates an expected call of Deletebook.
func (mr *MockBookServiceMockRecorder) Deletebook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deletebook", reflect.TypeOf((*MockBookService)(nil).Deletebook), ctx, id)
}

// GetAllBook mocks base method.
func (m *MockBookService) GetAllBook(ctx context.Context, title, includeAuthor string) ([]entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBook", ctx, title, includeAuthor)
	ret0, _ := ret[0].([]entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBook indicates an expected call of GetAllBook.
func (mr *MockBookServiceMockRecorder) GetAllBook(ctx, title, includeAuthor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBook", reflect.TypeOf((*MockBookService)(nil).GetAllBook), ctx, title, includeAuthor)
}

// GetbyID mocks base method.
func (m *MockBookService) GetbyID(ctx context.Context, id int) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetbyID", ctx, id)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetbyID indicates an expected call of GetbyID.
func (mr *MockBookServiceMockRecorder) GetbyID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetbyID", reflect.TypeOf((*MockBookService)(nil).GetbyID), ctx, id)
}

// Postbook mocks base method.
func (m *MockBookService) Postbook(ctx context.Context, book *entities.Book) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Postbook", ctx, book)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Postbook indicates an expected call of Postbook.
func (mr *MockBookServiceMockRecorder) Postbook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Postbook", reflect.TypeOf((*MockBookService)(nil).Postbook), ctx, book)
}

// Putbook mocks base method.
func (m *MockBookService) Putbook(ctx context.Context, id int, book *entities.Book) (entities.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Putbook", ctx, id, book)
	ret0, _ := ret[0].(entities.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Putbook indicates an expected call of Putbook.
func (mr *MockBookServiceMockRecorder) Putbook(ctx, id, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Putbook", reflect.TypeOf((*MockBookService)(nil).Putbook), ctx, id, book)
}
